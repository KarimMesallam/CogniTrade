#!/usr/bin/env python
"""
Strategy Comparison Script

This script compares the results of different trading strategies and provides educational
insights about them. It analyzes the trade logs generated by the backtest scripts and
visualizes the performance differences between strategies.

Educational components:
1. Performance comparison between technical strategies
2. Trade analysis (entry/exit points, trade duration, etc.)
3. Win rate and profit per trade analysis
4. Visual comparison of equity curves
5. Explanation of strategy advantages/disadvantages
"""

import os
import sys
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from datetime import datetime

# Add parent directory to path to import bot modules
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Ensure logs directory exists
os.makedirs('logs', exist_ok=True)

def load_trade_log(filename):
    """Load a trade log CSV file into a DataFrame"""
    if not os.path.exists(filename):
        print(f"ERROR: Trade log file not found: {filename}")
        return None
    
    try:
        df = pd.read_csv(filename)
        # Convert timestamp to datetime
        df['timestamp'] = pd.to_datetime(df['timestamp'])
        return df
    except Exception as e:
        print(f"Error loading trade log: {e}")
        return None

def analyze_strategy_performance(trade_log, strategy_name, initial_capital=10000.0):
    """Analyze the performance of a strategy based on its trade log"""
    
    if trade_log is None or trade_log.empty:
        print(f"No trade data available for {strategy_name}")
        return None
    
    # Filter out HOLD trades if present
    trades = trade_log[trade_log['type'] != 'HOLD'] if 'HOLD' in trade_log['type'].values else trade_log
    
    # Calculate trade pairs (buy/sell)
    buys = trades[trades['type'] == 'BUY']
    sells = trades[trades['type'] == 'SELL']
    
    # Must have same number of buys and sells for complete trades
    if len(buys) != len(sells):
        print(f"Warning: {strategy_name} has unequal buy ({len(buys)}) and sell ({len(sells)}) trades")
    
    # Calculate trade metrics
    if 'profit' in trades.columns:
        total_profit = trades[trades['type'] == 'SELL']['profit'].sum()
        profitable_trades = len(trades[trades['profit'] > 0])
        total_completed_trades = len(sells)
        win_rate = profitable_trades / total_completed_trades * 100 if total_completed_trades > 0 else 0
        
        # Calculate average profit per trade
        avg_profit_per_trade = total_profit / total_completed_trades if total_completed_trades > 0 else 0
        
        # Calculate average holding period
        trade_pairs = min(len(buys), len(sells))
        holding_periods = []
        
        for i in range(trade_pairs):
            if i < len(buys) and i < len(sells):
                buy_time = buys.iloc[i]['timestamp']
                sell_time = sells.iloc[i]['timestamp']
                # Calculate difference in hours
                diff_hours = (sell_time - buy_time).total_seconds() / 3600
                holding_periods.append(diff_hours)
        
        avg_holding_period = np.mean(holding_periods) if holding_periods else 0
        
        # Calculate return percentage
        total_return_pct = (total_profit / initial_capital) * 100
        
        # Calculate max drawdown (if possible)
        # This is simplified - in reality would need equity curve
        max_dd = 0
        if 'profit' in trades.columns:
            cumulative_profit = 0
            max_profit = 0
            
            for _, trade in trades.iterrows():
                if trade['type'] == 'SELL':
                    cumulative_profit += trade['profit']
                    max_profit = max(max_profit, cumulative_profit)
                    drawdown = (cumulative_profit - max_profit) / initial_capital * 100
                    max_dd = min(max_dd, drawdown)
        
        return {
            'strategy': strategy_name,
            'total_trades': total_completed_trades,
            'win_rate': win_rate,
            'total_profit': total_profit,
            'total_return_pct': total_return_pct,
            'avg_profit_per_trade': avg_profit_per_trade,
            'avg_holding_period_hours': avg_holding_period,
            'max_drawdown': max_dd
        }
    
    else:
        print(f"Warning: {strategy_name} trade log does not contain profit information")
        return None

def plot_comparison(strategies_data, output_file=None):
    """Create a visual comparison of strategy performance"""
    
    if not strategies_data:
        print("No strategy data to plot")
        return
    
    # Prepare data
    strategies = [data['strategy'] for data in strategies_data]
    returns = [data['total_return_pct'] for data in strategies_data]
    win_rates = [data['win_rate'] for data in strategies_data]
    trade_counts = [data['total_trades'] for data in strategies_data]
    holding_periods = [data['avg_holding_period_hours'] for data in strategies_data]
    
    # Create plot
    fig, axes = plt.subplots(2, 2, figsize=(12, 10))
    
    # Total Return
    axes[0, 0].bar(strategies, returns, color=['skyblue', 'lightgreen'])
    axes[0, 0].set_title('Total Return (%)')
    axes[0, 0].grid(axis='y', linestyle='--', alpha=0.7)
    for i, v in enumerate(returns):
        axes[0, 0].text(i, v + 0.5, f"{v:.2f}%", ha='center')
    
    # Win Rate
    axes[0, 1].bar(strategies, win_rates, color=['skyblue', 'lightgreen'])
    axes[0, 1].set_title('Win Rate (%)')
    axes[0, 1].grid(axis='y', linestyle='--', alpha=0.7)
    for i, v in enumerate(win_rates):
        axes[0, 1].text(i, v + 1, f"{v:.2f}%", ha='center')
    
    # Number of Trades
    axes[1, 0].bar(strategies, trade_counts, color=['skyblue', 'lightgreen'])
    axes[1, 0].set_title('Total Number of Trades')
    axes[1, 0].grid(axis='y', linestyle='--', alpha=0.7)
    for i, v in enumerate(trade_counts):
        axes[1, 0].text(i, v + 0.3, str(v), ha='center')
    
    # Average Holding Period
    axes[1, 1].bar(strategies, holding_periods, color=['skyblue', 'lightgreen'])
    axes[1, 1].set_title('Avg Holding Period (hours)')
    axes[1, 1].grid(axis='y', linestyle='--', alpha=0.7)
    for i, v in enumerate(holding_periods):
        axes[1, 1].text(i, v + 0.5, f"{v:.1f}", ha='center')
    
    plt.tight_layout()
    plt.suptitle('Strategy Comparison', fontsize=16)
    plt.subplots_adjust(top=0.92)
    
    if output_file:
        plt.savefig(output_file)
        print(f"Comparison chart saved to {output_file}")
    
    plt.show()

def print_educational_insights():
    """Print educational insights about the strategies"""
    
    print("\n==== TRADING STRATEGY EDUCATIONAL INSIGHTS ====\n")
    
    print("1. SMA CROSSOVER STRATEGY")
    print("   ------------------------------")
    print("   ✓ Description: The Simple Moving Average (SMA) crossover strategy buys when a shorter-period")
    print("     moving average crosses above a longer-period moving average, and sells when it crosses below.")
    print("   ✓ Theory: This strategy aims to capture trends. The short-term SMA represents recent price")
    print("     action, while the long-term SMA represents the longer-term trend.")
    print("   ✓ Advantages:")
    print("     - Simple to understand and implement")
    print("     - Effective in trending markets")
    print("     - Reduces emotional decision-making")
    print("   ✓ Disadvantages:")
    print("     - Lag due to the nature of moving averages")
    print("     - Many false signals in choppy/sideways markets")
    print("     - Suboptimal entry/exit points (often late)")
    print("   ✓ Best Market Conditions: Strong trending markets with minimal volatility")
    print("   ✓ Typical Parameters: Short MA (10-20 periods), Long MA (50-200 periods)")
    
    print("\n2. RSI STRATEGY")
    print("   ------------------------------")
    print("   ✓ Description: The Relative Strength Index (RSI) strategy buys when the RSI indicator drops")
    print("     below an oversold level (typically 30) and then rises back above it. It sells when RSI rises")
    print("     above an overbought level (typically 70) and then drops below it.")
    print("   ✓ Theory: This strategy aims to identify potential reversals by measuring the speed and change")
    print("     of price movements. RSI values above 70 indicate overbought conditions, while values below 30")
    print("     indicate oversold conditions.")
    print("   ✓ Advantages:")
    print("     - Good at identifying potential reversal points")
    print("     - Works well in ranging markets")
    print("     - Can catch significant price movements at turning points")
    print("   ✓ Disadvantages:")
    print("     - Unreliable during strong trends (false signals)")
    print("     - RSI can remain in extreme zones during strong trends")
    print("     - Requires more interpretation than SMA")
    print("   ✓ Best Market Conditions: Ranging/consolidating markets with clear support/resistance levels")
    print("   ✓ Typical Parameters: Period (14), Overbought (70), Oversold (30)")
    
    print("\n3. COMPARING THE STRATEGIES")
    print("   ------------------------------")
    print("   ✓ SMA Crossover vs. RSI:")
    print("     - SMA Crossover is a trend-following strategy; RSI is a mean-reversion strategy")
    print("     - SMA works best in trending markets; RSI works best in range-bound markets")
    print("     - SMA typically has more trades with smaller gains; RSI has fewer trades with larger potential gains")
    print("     - SMA is generally simpler to implement; RSI requires more nuanced interpretation")
    
    print("\n4. STRATEGY IMPLEMENTATION TIPS")
    print("   ------------------------------")
    print("   ✓ Consider combining strategies for confirmation (e.g., RSI + SMA)")
    print("   ✓ Use multiple timeframes to filter signals (e.g., daily trend + hourly entries)")
    print("   ✓ Add volume analysis to improve signal quality")
    print("   ✓ Implement proper position sizing and risk management (most important)")
    print("   ✓ Backtest strategies on different market conditions")
    print("   ✓ Keep a trading journal to track performance and refine your approach")
    
    print("\n5. COMMON PITFALLS")
    print("   ------------------------------")
    print("   ✓ Overoptimization: Creating strategies that work perfectly on historical data but fail on future data")
    print("   ✓ Ignoring transaction costs: Commission and slippage can significantly impact real-world performance")
    print("   ✓ Psychological challenges: Difficulty sticking to the strategy during drawdowns")
    print("   ✓ Market regime changes: Strategies that work in one market condition often fail in others")
    print("   ✓ Neglecting risk management: No strategy works without proper position sizing and risk controls")
    
    print("\n==== NEXT STEPS FOR LEARNING ====")
    print("1. Study the strategy implementation in the code to understand the mechanics")
    print("2. Try modifying strategy parameters to see how they affect performance")
    print("3. Implement a combined strategy that uses both SMA and RSI for confirmation")
    print("4. Add position sizing and risk management rules to the strategies")
    print("5. Test strategies on different symbols and timeframes")

def main():
    """Main function to compare strategies"""
    print("\n=== Strategy Comparison Tool ===\n")
    
    # Find available trade logs in the logs directory
    log_files = [f for f in os.listdir('logs') if f.endswith('.csv')]
    
    if not log_files:
        print("No trade logs found in the logs directory")
        return
    
    # Print available logs
    print(f"Found {len(log_files)} trade logs:")
    for i, file in enumerate(log_files):
        print(f"{i+1}. {file}")
    
    print("\nAttempting to identify strategy types based on filenames...")
    
    # Try to identify strategy types based on filename patterns
    sma_logs = [f for f in log_files if 'sma' in f.lower()]
    rsi_logs = [f for f in log_files if 'rsi' in f.lower()]
    
    if sma_logs:
        print(f"Found SMA strategy logs: {', '.join(sma_logs)}")
    if rsi_logs:
        print(f"Found RSI strategy logs: {', '.join(rsi_logs)}")
    
    # Load and analyze strategy results
    strategies_data = []
    
    # Process SMA logs
    for log_file in sma_logs:
        log_path = os.path.join('logs', log_file)
        df = load_trade_log(log_path)
        if df is not None:
            results = analyze_strategy_performance(df, "SMA Crossover")
            if results:
                strategies_data.append(results)
    
    # Process RSI logs
    for log_file in rsi_logs:
        log_path = os.path.join('logs', log_file)
        df = load_trade_log(log_path)
        if df is not None:
            results = analyze_strategy_performance(df, "RSI Strategy")
            if results:
                strategies_data.append(results)
    
    # Compare strategies
    if len(strategies_data) >= 2:
        print("\n=== Strategy Performance Comparison ===")
        
        comparison_table = []
        for data in strategies_data:
            comparison_table.append([
                data['strategy'],
                data['total_trades'],
                f"{data['win_rate']:.2f}%",
                f"${data['total_profit']:.2f}",
                f"{data['total_return_pct']:.2f}%",
                f"${data['avg_profit_per_trade']:.2f}",
                f"{data['avg_holding_period_hours']:.1f} hours",
                f"{data['max_drawdown']:.2f}%"
            ])
        
        headers = ["Strategy", "Total Trades", "Win Rate", "Total Profit", 
                  "Return %", "Avg Profit/Trade", "Avg Hold Time", "Max Drawdown"]
        
        # Print table
        print("\n" + "-" * 100)
        print("| " + " | ".join(headers) + " |")
        print("-" * 100)
        for row in comparison_table:
            print("| " + " | ".join(str(cell).ljust(len(headers[i])) for i, cell in enumerate(row)) + " |")
        print("-" * 100)
        
        # Create comparison chart
        plot_comparison(strategies_data, output_file='logs/strategy_comparison.png')
    
    elif len(strategies_data) == 1:
        print("\n=== Single Strategy Analysis ===")
        data = strategies_data[0]
        print(f"Strategy: {data['strategy']}")
        print(f"Total Trades: {data['total_trades']}")
        print(f"Win Rate: {data['win_rate']:.2f}%")
        print(f"Total Profit: ${data['total_profit']:.2f}")
        print(f"Total Return: {data['total_return_pct']:.2f}%")
        print(f"Avg Profit per Trade: ${data['avg_profit_per_trade']:.2f}")
        print(f"Avg Holding Period: {data['avg_holding_period_hours']:.1f} hours")
        print(f"Max Drawdown: {data['max_drawdown']:.2f}%")
    
    else:
        print("No strategy data could be analyzed")
    
    # Print educational insights
    print_educational_insights()

if __name__ == "__main__":
    main() 